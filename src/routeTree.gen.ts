/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as RegisterRouteImport } from './routes/register'
import { Route as LoginRouteImport } from './routes/login'
import { Route as ProtectedRouteImport } from './routes/_protected'
import { Route as ProtectedIndexRouteImport } from './routes/_protected/index'
import { Route as ProtectedTimerRouteImport } from './routes/_protected/timer'
import { Route as ProtectedTasksRouteImport } from './routes/_protected/tasks'
import { Route as ProtectedProfileRouteImport } from './routes/_protected/profile'
import { Route as ProtectedNotesRouteImport } from './routes/_protected/notes'
import { Route as ProtectedCalendarRouteImport } from './routes/_protected/calendar'

const RegisterRoute = RegisterRouteImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const ProtectedRoute = ProtectedRouteImport.update({
  id: '/_protected',
  getParentRoute: () => rootRouteImport,
} as any)
const ProtectedIndexRoute = ProtectedIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => ProtectedRoute,
} as any)
const ProtectedTimerRoute = ProtectedTimerRouteImport.update({
  id: '/timer',
  path: '/timer',
  getParentRoute: () => ProtectedRoute,
} as any)
const ProtectedTasksRoute = ProtectedTasksRouteImport.update({
  id: '/tasks',
  path: '/tasks',
  getParentRoute: () => ProtectedRoute,
} as any)
const ProtectedProfileRoute = ProtectedProfileRouteImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => ProtectedRoute,
} as any)
const ProtectedNotesRoute = ProtectedNotesRouteImport.update({
  id: '/notes',
  path: '/notes',
  getParentRoute: () => ProtectedRoute,
} as any)
const ProtectedCalendarRoute = ProtectedCalendarRouteImport.update({
  id: '/calendar',
  path: '/calendar',
  getParentRoute: () => ProtectedRoute,
} as any)

export interface FileRoutesByFullPath {
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/calendar': typeof ProtectedCalendarRoute
  '/notes': typeof ProtectedNotesRoute
  '/profile': typeof ProtectedProfileRoute
  '/tasks': typeof ProtectedTasksRoute
  '/timer': typeof ProtectedTimerRoute
  '/': typeof ProtectedIndexRoute
}
export interface FileRoutesByTo {
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/calendar': typeof ProtectedCalendarRoute
  '/notes': typeof ProtectedNotesRoute
  '/profile': typeof ProtectedProfileRoute
  '/tasks': typeof ProtectedTasksRoute
  '/timer': typeof ProtectedTimerRoute
  '/': typeof ProtectedIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_protected': typeof ProtectedRouteWithChildren
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/_protected/calendar': typeof ProtectedCalendarRoute
  '/_protected/notes': typeof ProtectedNotesRoute
  '/_protected/profile': typeof ProtectedProfileRoute
  '/_protected/tasks': typeof ProtectedTasksRoute
  '/_protected/timer': typeof ProtectedTimerRoute
  '/_protected/': typeof ProtectedIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/login'
    | '/register'
    | '/calendar'
    | '/notes'
    | '/profile'
    | '/tasks'
    | '/timer'
    | '/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/login'
    | '/register'
    | '/calendar'
    | '/notes'
    | '/profile'
    | '/tasks'
    | '/timer'
    | '/'
  id:
    | '__root__'
    | '/_protected'
    | '/login'
    | '/register'
    | '/_protected/calendar'
    | '/_protected/notes'
    | '/_protected/profile'
    | '/_protected/tasks'
    | '/_protected/timer'
    | '/_protected/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  ProtectedRoute: typeof ProtectedRouteWithChildren
  LoginRoute: typeof LoginRoute
  RegisterRoute: typeof RegisterRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/register': {
      id: '/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof RegisterRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_protected': {
      id: '/_protected'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof ProtectedRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_protected/': {
      id: '/_protected/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof ProtectedIndexRouteImport
      parentRoute: typeof ProtectedRoute
    }
    '/_protected/timer': {
      id: '/_protected/timer'
      path: '/timer'
      fullPath: '/timer'
      preLoaderRoute: typeof ProtectedTimerRouteImport
      parentRoute: typeof ProtectedRoute
    }
    '/_protected/tasks': {
      id: '/_protected/tasks'
      path: '/tasks'
      fullPath: '/tasks'
      preLoaderRoute: typeof ProtectedTasksRouteImport
      parentRoute: typeof ProtectedRoute
    }
    '/_protected/profile': {
      id: '/_protected/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof ProtectedProfileRouteImport
      parentRoute: typeof ProtectedRoute
    }
    '/_protected/notes': {
      id: '/_protected/notes'
      path: '/notes'
      fullPath: '/notes'
      preLoaderRoute: typeof ProtectedNotesRouteImport
      parentRoute: typeof ProtectedRoute
    }
    '/_protected/calendar': {
      id: '/_protected/calendar'
      path: '/calendar'
      fullPath: '/calendar'
      preLoaderRoute: typeof ProtectedCalendarRouteImport
      parentRoute: typeof ProtectedRoute
    }
  }
}

interface ProtectedRouteChildren {
  ProtectedCalendarRoute: typeof ProtectedCalendarRoute
  ProtectedNotesRoute: typeof ProtectedNotesRoute
  ProtectedProfileRoute: typeof ProtectedProfileRoute
  ProtectedTasksRoute: typeof ProtectedTasksRoute
  ProtectedTimerRoute: typeof ProtectedTimerRoute
  ProtectedIndexRoute: typeof ProtectedIndexRoute
}

const ProtectedRouteChildren: ProtectedRouteChildren = {
  ProtectedCalendarRoute: ProtectedCalendarRoute,
  ProtectedNotesRoute: ProtectedNotesRoute,
  ProtectedProfileRoute: ProtectedProfileRoute,
  ProtectedTasksRoute: ProtectedTasksRoute,
  ProtectedTimerRoute: ProtectedTimerRoute,
  ProtectedIndexRoute: ProtectedIndexRoute,
}

const ProtectedRouteWithChildren = ProtectedRoute._addFileChildren(
  ProtectedRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  ProtectedRoute: ProtectedRouteWithChildren,
  LoginRoute: LoginRoute,
  RegisterRoute: RegisterRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
